# shellcheck shell=sh disable=SC3043 # xrc
# author:       Li Junhao           l@x-cmd.com

___x_cmd_log() {
    case "$1" in
        :*)                                     ___x_cmd_log_pr "$@" ;;
        "")                                     ___x_cmd_log_help; return 1 ;;
        help|-H|-h|--help)          shift;      ___x_cmd_log_help; return 1 ;;
        init)                       shift;      ___x_cmd_log_init "$@" ;;
        init0)                      shift;      ___x_cmd_log_init0 "$@" ;;
        timestamp)                  shift;      ___x_cmd_log_timestamp "$@" ;;
        *)
            while [ "$#" -gt 0 ]; do
                case "$1" in
                    */*)                        ___x_cmd_log_set_level "${1%/*}" "${1}" ;;
                    *)                          ___x_cmd_log_set_level "$1" info
                esac
                shift
            done
    esac
}


# Section: init init0
___x_cmd_log_init(){
    local logger_name="${1:?Provide logger name}"

    if [ "$#" -eq 1 ]; then
        eval "${logger_name}_log(){     ___x_cmd_log_pr $logger_name \"\$@\";   }"
        return 0
    fi

    shift

    local level=""
    local level_code=6

    local arg
    for arg in "$@"; do
        case "$arg" in
            debug|info|warn|error)          ;;
            +debug)                     [ $level_code -gt 1 ] && { level=debug; level_code=1; } ;;
            +info)                      [ $level_code -gt 2 ] && { level=info;  level_code=2; } ;;
            +warn)                      [ $level_code -gt 3 ] && { level=warn;  level_code=3; } ;;
            +error)                     [ $level_code -gt 4 ] && { level=error; level_code=4; } ;;
            *)                          continue ;;
        esac
        eval "alias ${logger_name}:$arg='test 0 -lt \"\${___X_CMD_LOG__${logger_name}:-1}\" || O=${logger_name} ___x_cmd_log_pr_${arg}'"
    done

    if [ -z "$level" ]; then
        O=log ___x_cmd_log_set_level "$logger_name" info 1
    else
        O=log ___x_cmd_log_set_level "$logger_name" "$level" "$level_code"
    fi
}

___x_cmd_log_init0(){
    local var="___X_CMD_LOG__${1:?Provide logger name}"

    if eval test "\${$var:-1}" -gt 0; then
        eval "$var=-1"
    fi

    local on=
    for level_name in debug info warn error; do
        [ "$level_name" = "$level" ] && on=1
        if [ -z "$on" ]; then
            alias "${logger_name}:${level_name}"=" : # "
        else
            alias "${logger_name}:${level_name}"="${logger_name}_log ${level_name}"
        fi
    done
}

# EndSection

# Section: timestamp set_level help
___x_cmd_log_timestamp(){
    local arg="${1:?Provide timestamp}"
    case "$arg" in
        on)     ___X_CMD_LOG__TIMESTAMP_FORMAT="+%H:%M:%S" ;;
        off)    ___X_CMD_LOG__TIMESTAMP_FORMAT= ;;
        *)      printf "Try customized timestamp format wit date command:\n"
                date "$arg" || return 1
                ___X_CMD_LOG__TIMESTAMP_FORMAT="$arg"
    esac
}

___x_cmd_log_set_level(){
    local logger_name="${1:?Provide loggername}"

    local level="${2:?Provide level}"
    local level_code="${3}"

    if [ -z "$level_code" ]; then
        case "$level" in
            debug)      level_code=1 ;;
            info)       level_code=2 ;;
            warn)       level_code=3 ;;
            error)      level_code=4 ;;
        esac
    fi

    local var="___X_CMD_LOG__${logger_name}"

    if eval test "\$$var" -gt 0; then
        eval "$var=$level_code"
    else
        eval "$var=-$level_code"
        if [ -d "$___X_CMD_ROOT/$logger_name" ]; then
            ___x_cmd_log_pr "${O:-$logger_name}" warn "Reload the logger by reload the module"
            xrc:inner "$logger_name/latest"
        fi
    fi

    ___x_cmd_log_pr "${O:-$logger_name}" debug "Level of logger [$logger_name] is set to [$level]"
}

___x_cmd_log_help(){
    printf '%s' '
x log     log control facility
    Usage:
        x log init [ module ]
        x log [... +module | -module | module/log-level ]
Subcommand:
    init <module>:                  Generate function "<module>_log"
    timestamp < on | off | <format> >:
                                    off, default setting. shutdown the timestamp output in log
                                    on, default format is +%H:%M:%S
                                    <format>, customized timestamp format like "+%H:%M:%S", "+%m/%d-%H:%M:%S"
Example:
    Enable debug log for module json:
            x log +json          or   x log json
            x log json/verbose   or   x log json/v
            x log json/debug     or   x log json/d
    Dsiable debug log for module json:
            x log -json
            x log json/info
'

}
# EndSection

# Section: logger
# TODO: To move xrc_log
___X_CMD_LOG_C_TF=

___X_CMD_LOG__TIMESTAMP_FORMAT=      # "+%H:%M:%S"      # Enable Timestamp.

___X_CMD_LOG_C_MSG="${___X_CMD_LOG_C_MSG:-""}"
___X_CMD_LOG_C_DEBUG="${___X_CMD_LOG_C_DEBUG:-"\\033[32m"}"
___X_CMD_LOG_C_INFO="${___X_CMD_LOG_C_INFO:-"\\033[36m"}"
___X_CMD_LOG_C_WARN="${___X_CMD_LOG_C_WARN:-"\\033[33m"}"
___X_CMD_LOG_C_ERROR="${___X_CMD_LOG_C_ERROR:-"\\033[31m"}"

___X_CMD_LOG_C_TIMESTAMP_BEGIN="${___X_CMD_LOG_C_WARN:-"["}"
___X_CMD_LOG_C_TIMESTAMP_END="${___X_CMD_LOG_C_WARN:-"]"}"

___x_cmd_log_pr(){
    case "${2:?Provide level}" in
        debug)      eval "test 0 -lt \"\${___X_CMD_LOG__${1#:}:-1}\"" || { local O="${1#:}"; shift 2; L=DBG C="$___X_CMD_LOG_C_DEBUG"  ___x_cmd_log_0 "$@"; } ;;
        info)       eval "test 1 -lt \"\${___X_CMD_LOG__${1#:}:-1}\"" || { local O="${1#:}"; shift 2; L=INF C="$___X_CMD_LOG_C_INFO"   ___x_cmd_log_0 "$@"; } ;;
        warn)       eval "test 2 -lt \"\${___X_CMD_LOG__${1#:}:-1}\"" || { local O="${1#:}"; shift 2; L=WRN C="$___X_CMD_LOG_C_WARN"   ___x_cmd_log_0 "$@"; } ;;
        error)      eval "test 3 -lt \"\${___X_CMD_LOG__${1#:}:-1}\"" || { local O="${1#:}"; shift 2; L=ERR C="$___X_CMD_LOG_C_ERROR"  ___x_cmd_log_0 "$@"; } ;;
        *)          eval "test 0 -lt \"\${___X_CMD_LOG__${1#:}:-1}\"" || { local O="${1#:}"; shift 1; L=DBG C="$___X_CMD_LOG_C_DEBUG"  ___x_cmd_log_0 "$@"; } ;;
    esac
}

___x_cmd_log_pr_debug(){
    L=DBG C="$___X_CMD_LOG_C_DEBUG"  ___x_cmd_log_0 "$@"
}

___x_cmd_log_pr_info(){
    L=INF C="$___X_CMD_LOG_C_INFO"  ___x_cmd_log_0 "$@"
}

___x_cmd_log_pr_warn(){
    L=WRN C="$___X_CMD_LOG_C_WARN"  ___x_cmd_log_0 "$@"
}

___x_cmd_log_pr_error(){
    L=ERR C="$___X_CMD_LOG_C_ERROR"  ___x_cmd_log_0 "$@"
}

___x_cmd_log_0(){
    if [ -z "$___X_CMD_LOG_C_TF" ]; then
        if [ -t 2 ]; then
            ___X_CMD_LOG_C_TF=1
        fi
    fi

    local IFS=" "
    local timestamp

    if [ -n "$___X_CMD_LOG_C_TF" ]; then
        if [ -n "$___X_CMD_LOG__TIMESTAMP_FORMAT" ]; then
            timestamp="$(date "${___X_CMD_LOG__TIMESTAMP_FORMAT}")"
            timestamp="${___X_CMD_LOG_C_TIMESTAMP_BEGIN}${timestamp}${___X_CMD_LOG_C_TIMESTAMP_END} "
        fi

        if [ $# -gt 0 ]; then
            printf "${timestamp}\033[1m${C}[%s] <%s>: \033[0m${___X_CMD_LOG_C_MSG:-"$C"}%s\033[0m\n" "$L" "$O" "$*"
        else
            printf "${timestamp}\033[1m${C}[%s] <%s>:" "$L" "$O"
            cat | awk 'NR==1{ print($0) }; NR>=2{ print("> " $0); }; END{ printf("%s", "\033[0m"); }'
        fi
    else
        [ -n "$___X_CMD_LOG__TIMESTAMP_FORMAT" ] && timestamp="$(date "${___X_CMD_LOG__TIMESTAMP_FORMAT}") "
        if [ $# -gt 0 ]; then
            printf "${timestamp}[%s] <%s>: %s\n" "$L" "$O" "$*"
        else
            printf "${timestamp}[%s] <%s>:" "$L" "$O"
            cat | awk 'NR==1{ print($0) }; NR>=2{ print("> " $0); }; }'
        fi
    fi >&2
}

# EndSection

# Section: completer, Maybe we can use advise.json to replace it for advise module can support the following function.
# shellcheck disable=SC3010,SC2154
___x_cmd_log_completer(){

    case "$cur" in
        "")
            printf "%s\n" "+"
            printf "%s\n" "-"
            ls "$___X_CMD_ROOT" | grep -v BASE64  | awk '{ print $0 "/"; }'
            ;;
        */*)
            printf "%s\n" "${cur%/*}/debug"
            printf "%s\n" "${cur%/*}/verbose"
            printf "%s\n" "${cur%/*}/warn"
            printf "%s\n" "${cur%/*}/error"
            ;;
        +*)   ls "$___X_CMD_ROOT" | grep -v BASE64 | awk '{ print "+" $0; }' ;;
        -*)   ls "$___X_CMD_ROOT" | grep -v BASE64 | awk '{ print "-" $0; }' ;;
        *)
            ls "$___X_CMD_ROOT" | grep -v BASE64 | awk -v cur="$cur" '
    BEGIN { arr_len=0; }
    $0~"^"cur{
        arr_len += 1
        arr[arr_len] = $0;
        if ( $0 !~ /\/$/ ) arr[arr_len] = arr[arr_len] "/"
    }
    END {
        if (arr_len != 1) {
            for (i=1; i<=arr_len; ++i) print arr[i]
        } else {
            # It is useful! The completion seemed to pause before "/"
            print arr[1] "verbose"
            print arr[1] "debug"
            print arr[1] "warn"
            print arr[1] "error"
        }
    }
'
            ;;
    esac
}
# EndSection

xrc setmain ___x_cmd_log
